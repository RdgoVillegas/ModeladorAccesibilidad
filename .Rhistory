lapply(1:3, function(x){print(paste(x, x-1))})
lapply(1:3, function(x){print(paste(x, x[x -1]))})
lapply(c(3600, 2400, 1200), function(x){print(paste(x, x[x -1]))})
iso1200 <- isos %>% filter(time == 1200) %>%
select(time) %>%
mutate(id = 1)
3  %% 2
1  %% 2
exists()
exists(nuevaEscuela)
exists("nuevaEscuela")
mzn_rbd
View(escuelasSf)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(exists("nuevaEscuela"))
class(escuelasSf)
class(escuelasSf) == "sf"
st_is_valid(escuelasSf)
st_is_valid(datos)
st_geometry_type(escuelasSf)
class(escuelasSf)
class(escuelasSf)[1] == "sf"
class(datos)[1] == "sf"
runApp()
runApp()
# Formatear las coordenadas de la nueva escuela
coordinates <- paste0(datos$lat, "0%2C",datos$lon)
datos
# Formatear las coordenadas de la nueva escuela
coordinates <- paste0(newSchool$lat, "0%2C",newSchool$lon)
newSchool <- datos
# Formatear las coordenadas de la nueva escuela
coordinates <- paste0(newSchool$lat, "0%2C",newSchool$lon)
runApp()
# Formatear las coordenadas de la nueva escuela
coordinates <- paste0(newSchool$lat, "0%2C",newSchool$lon)
# Hacer las consultas pertinentes
isos <- lapply(c(3600,2400,1200), function(x){
isocrona(coordinates = coordinates, mode = "WALK",
date = "2020-10-12", time = "09:00:00",
cutoffSec = x, viaje.velocidad = 1.33) %>%
st_transform(32719)})
# Pasar la lista a df
isos <- do.call(rbind, isos)
iso1200 <- isos %>% filter(time == 1200) %>%
select(time) %>%
mutate(id = 1)
iso2400 <- isos %>% filter(time == 2400) %>%
st_difference(isos %>% filter(time == 1200)) %>%
select(time) %>%
mutate(id = 2)
iso3600 <- isos %>% filter(time == 3600) %>%
st_difference(isos %>% filter(time == 2400)) %>%
select(time) %>%
mutate(id = 3)
# Combinar todas las isocronas cortadas, y asignarles el rbd de fantasía
iso_rbdcut <- rbind(iso1200, iso2400) %>%
rbind(iso3600) %>%
mutate(fromPlace = newSchool$rbd)
# Hacer la intersección con las manzanas
new_mzn_rbd <- centroides %>%
st_transform(32719) %>%
st_intersection(iso_rbdcut) %>%
`st_geometry<-`(NULL)
centroides <. mznsCentroide
centroides <- mznsCentroide
# Hacer la intersección con las manzanas
new_mzn_rbd <- centroides %>%
st_transform(32719) %>%
st_intersection(iso_rbdcut) %>%
`st_geometry<-`(NULL)
# Hacer la intersección con las manzanas
new_mzn_rbd <- centroides %>%
st_transform(32719) %>%
st_intersection(iso_rbdcut) %>%
`st_geometry<-`(NULL) %>%
rbind(mzn_rbd)
runApp()
runApp()
# Hacer la intersección con las manzanas
new_mzn_rbd <- centroides %>%
st_transform(32719) %>%
st_intersection(iso_rbdcut) %>%
`st_geometry<-`(NULL)
new_mzn_rbd
new_mzn_rbd$fromPlace
new_mzn_rbd$fromPlace %>% class
mzn_rbd$fromPlace %>% class
runApp()
runApp()
runApp()
runApp()
tmp.mzn_rbd
mzn_rbd <- tmp.mzn_rbd
# Peso entre 0 y 20 = 10 min -> 1
# Peso entre 20 y 40 = 30 min -> 0.34415585
# Peso entre 40 y 60 = 50 min -> 0.09043242
if (class(escuelasSf)[1] == "sf") {
escuelasSf <- escuelasSf %>%
`st_geometry<-`(NULL)
}
mzn_rbd <- mzn_rbd %>%
mutate(peso = case_when(time == 3600 ~ 0.09043242,
time == 2400 ~ 0.34415585,
time == 1200 ~ 1.0)) %>%
# Luego, se combina con la base de escuelas que contiene la capacidad de carga. i.e: el número de niñes en la escuela.
left_join(escuelasSf, by = c("fromPlace" = "rbd"))
mzn_rbd
# Paso 1- Calcular la demanda
# Cada manzana tiene un peso para cada colegio en su rango. Ese peso depende de la distancia a la que se encuentre.
# El peso Gij de la manzana X al colegio A está dado por:
# GXA = El peso de A / sum(peso de todos los colegios en las isocronas de la manzana)
demand <- mzn_rbd %>%
group_by(objectid) %>% # agrupar por manzanas
mutate(sigma_Gij = sum(peso), # La suma de los pesos
Gij = peso / sigma_Gij)# El peso de un colegio j en la manzana i
View(mzn_rbd)
# Paso 1- Calcular la demanda
# Cada manzana tiene un peso para cada colegio en su rango. Ese peso depende de la distancia a la que se encuentre.
# El peso Gij de la manzana X al colegio A está dado por:
# GXA = El peso de A / sum(peso de todos los colegios en las isocronas de la manzana)
demand <- mzn_rbd %>%
group_by(objectid) %>% # agrupar por manzanas
mutate(sigma_Gij = sum(peso), # La suma de los pesos
Gij = peso / sigma_Gij)# El peso de un colegio j en la manzana i
supply <- demand %>% # Tomar la tabla de demanda, que tiene Gij
group_by(fromPlace) %>% # Agrupar por escuelas
mutate(GPW = Gij*peso*n6a14) %>% # calcular GWP
summarise(R = unique(basica_cap) / sum(GPW)) # Calcular R
access_escolar <- demand %>% # Tomar tabla de demanda
select(objectid, fromPlace, peso, Gij) %>% # Seleccionar variables importantes
left_join(supply) %>% # Combinar con tabla de oferta
mutate(Access = Gij * R * peso) %>% # Calcular cuantos cupos le corresponden a cada manzana por cada colegio
group_by(objectid) %>% # Agrupar por manzanas
summarise(Access = sum(Access)%>% round(2))  # Sumar los cupos por manzana
access_mnzs <- mzns %>%
left_join(access_escolar) %>%
mutate(Access = replace_na(Access, 0) )
View(access_mnzs)
access_mnzs
plot(access_mnzs[,4])
runApp()
runApp()
runApp()
shiny::runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Neceisto implementar un botón que diga "añadir colegio" que haga lo siguiente:
#  Pedir una capacidad
#  Pedir una localización
#  Guardar
library(shiny); library(tidyverse); library(sf);library(shinydashboard)
library(plotly)
source("funs/helperFun.R", encoding = "UTF-8")
# Icono customizado
greenLeafIcon <- makeIcon(
iconUrl = "http://www.clker.com/cliparts/v/E/r/a/2/E/google-maps-marker-for-residencelamontagne.svg.hi.png",
iconWidth = 25, iconHeight = 40,
iconAnchorX = 22, iconAnchorY = 22
)
# este bloque crea un set de paneles desplegables para añadir escuelas
parameter_tabs <- tabsetPanel(
id = "params",
type = "hidden",
tabPanel(title = "Panel 1", value = "panel0"),
tabPanel(title = "Panel 2", value = "panel1",
numericInput("Capacidad", "Capacidad del Colegio", value = 450),
actionButton("applyChanges", "Calcular Cambios"))
)
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2)
binpal <- colorBin("PuOr",cortes, bins= 9, pretty = T)
load(file = "Data/mzn_rbd.RDS")
load(file = "Data/mzns_procesadas.RDS")
load(file = "Data/rbd_procesadas.RDS")
load(file = "Data/mznsCentroide.RDS")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nuevaEscuela <- data.frame(rbd = "999999", nom_rbd = "Nueva Escuela",
basica_cap = input$Capacidad,
lat = -36.61718, lon = -72.08319)
nuevaEscuela <- data.frame(rbd = "999999", nom_rbd = "Nueva Escuela",
basica_cap = 250,
lat = -36.61718, lon = -72.08319)
nuevaEscuela %>%          st_as_sf(coords = c('lon', 'lat'), crs = 4326)
newSchool <- nuevaEscuela
# Formatear las coordenadas de la nueva escuela
coordinates(newSchool)
# Formatear las coordenadas de la nueva escuela
coords(newSchool)
require(sf)
# Formatear las coordenadas de la nueva escuela
coords(newSchool)
# Formatear las coordenadas de la nueva escuela
coord(newSchool)
# Formatear las coordenadas de la nueva escuela
st_coordinates()(newSchool)
# Formatear las coordenadas de la nueva escuela
st_coordinates(newSchool)
newSchool
nuevaEscuela <- data.frame(rbd = "999999", nom_rbd = "Nueva Escuela",
+                            basica_cap = 250,
+                            lat = -36.61718, lon = -72.08319) %>%          st_as_sf(coords = c('lon', 'lat'), crs = 4326)
nuevaEscuela <- data.frame(rbd = "999999", nom_rbd = "Nueva Escuela",basica_cap = 250,lat = -36.61718, lon = -72.08319) %>%          st_as_sf(coords = c('lon', 'lat'), crs = 4326)
# Formatear las coordenadas de la nueva escuela
st_coordinates(newSchool)
newSchool <- nuevaEscuela
# Formatear las coordenadas de la nueva escuela
st_coordinates(newSchool)
# Formatear las coordenadas de la nueva escuela
coords <- st_coordinates(newSchool)
coordinates <- paste0(coords[2], "0%2C",coords[1])
coordinates
runApp()
names(escuelasSf)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Formatear las coordenadas de la nueva escuela
coords <- st_coordinates(newSchool)
coordinates <- paste0(coords[2], "0%2C",coords[1])
# Hacer las consultas pertinentes
isos <- lapply(c(3600,2400,1200), function(x){
isocrona(coordinates = coordinates, mode = "WALK",
date = "2020-10-12", time = "09:00:00",
cutoffSec = x, viaje.velocidad = 1.33) %>%
st_transform(32719)})
# Pasar la lista a df
isos <- do.call(rbind, isos)
isos
coordinates
# Formatear las coordenadas de la nueva escuela
coords <- st_coordinates(newSchool)
newSchool
coordinates <- paste0(coords[2], "0%2C",coords[1])
# Hacer las consultas pertinentes
isos <- lapply(c(3600,2400,1200), function(x){
isocrona(coordinates = coordinates, mode = "WALK",
date = "2020-10-12", time = "09:00:00",
cutoffSec = x, viaje.velocidad = 1.33) %>%
st_transform(32719)})
# Pasar la lista a df
isos <- do.call(rbind, isos)
runApp()
runApp()
runApp()
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Neceisto implementar un botón que diga "añadir colegio" que haga lo siguiente:
#  Pedir una capacidad
#  Pedir una localización
#  Guardar
library(shiny); library(tidyverse); library(sf);library(shinydashboard)
library(plotly); library(RCurl)
source("funs/helperFun.R", encoding = "UTF-8")
# Icono customizado
greenLeafIcon <- makeIcon(
iconUrl = "http://www.clker.com/cliparts/v/E/r/a/2/E/google-maps-marker-for-residencelamontagne.svg.hi.png",
iconWidth = 25, iconHeight = 40,
iconAnchorX = 22, iconAnchorY = 22
)
# este bloque crea un set de paneles desplegables para añadir escuelas
parameter_tabs <- tabsetPanel(
id = "params",
type = "hidden",
tabPanel(title = "Panel 1", value = "panel0"),
tabPanel(title = "Panel 2", value = "panel1",
numericInput("Capacidad", "Capacidad del Colegio", value = 450),
actionButton("applyChanges", "Calcular Cambios"))
)
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2)
binpal <- colorBin("PuOr",cortes, bins= 9, pretty = T)
load(file = "Data/mzn_rbd.RDS")
load(file = "Data/mzns_procesadas.RDS")
load(file = "Data/rbd_procesadas.RDS")
load(file = "Data/mznsCentroide.RDS")
runApp()
runApp()
runApp()
unique(escuelasSf$rbd)
sample(50000:10000, 1)
runApp()
runApp()
runApp()
runApp()
runApp()
?addLegend
binpal
binpal
binpal <- colorBin("PuOr",cortes, bins= 9, pretty = T)
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 999)
cortes
runApp()
length(c("0 - 0.2", "0.21 - 0.4", "0.41 - 0.6", "0.61 - 0.8",
"0.81 - 1.0", "1.01 - 1.2", "1.21 - 1.4", "1.41 - 1.6",
"1.81 - 2.0", "2.0 o +"))
runApp()
c("0 - 0.2", "0.21 - 0.4", "0.41 - 0.6", "0.61 - 0.8",
"0.81 - 1.0", "1.01 - 1.2", "1.21 - 1.4", "1.41 - 1.6",
"1.81 - 2.0", "2.0 o +") %>% length
binpal
length ( c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 999))
binpal <- colorBin("PuOr",cortes, bins= 9, pretty = T)
binpal
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 999)
binpal <- colorBin("PuOr",cortes, bins= 9, pretty = T)
binpal
colorBin("PuOr",cortes, bins= 9, pretty = T)
colorBin("PuOr",cortes, bins= 9, pretty = T)
colorBin("PuOr",cortes, bins= 9, pretty = T)
colorBin("PuOr",cortes, bins= 10, pretty = T)
colorBin("PuOr",cortes, bins= 11, pretty = T)
colorBin("PuOr",cortes, bins= 9, pretty = T)
colorBin("PuOr",cortes, bins= 9, pretty = F)
binpal <- colorBin("PuOr",cortes, bins= 10, pretty = F)
binpal
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 999)
binpal <- colorBin("PuOr",cortes, bins= 10, pretty = F)
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 2.25)
binpal <- colorBin("PuOr",cortes, bins= 10, pretty = F)
binpal
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 99)
binpal <- colorBin("PuOr",cortes, bins= 10, pretty = F)
binpal
binpal <- colorBin("PuOr",cortes, bins= 10, pretty = T)
binpal
?colorBin
binpal <- colorBin("PuOr", bins= cortes, pretty = T)
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 99)
binpal <- colorBin("PuOr", bins= cortes, pretty = T)
binpal
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 999)
binpal <- colorBin("PuOr", bins= cortes, pretty = T)
binpal
runApp()
binpal
cortes <- c(0, .2, .4,.6, .8, 1, 1.2, 1.4, 1.6, 1.8, 2, 999)
cortes
binpal <- colorBin("PuOr", bins= cortes, pretty = T)
binpal
runApp()
c("0 - 0.2", "0.21 - 0.4", "0.41 - 0.6", "0.61 - 0.8",
"0.81 - 1.0", "1.01 - 1.2", "1.21 - 1.4", "1.41 - 1.6",
"1.81 - 2.0", "2.0 o +")
legnth (c("0 - 0.2", "0.21 - 0.4", "0.41 - 0.6", "0.61 - 0.8",
"0.81 - 1.0", "1.01 - 1.2", "1.21 - 1.4", "1.41 - 1.6",
"1.81 - 2.0", "2.0 o +"))
length(c("0 - 0.2", "0.21 - 0.4", "0.41 - 0.6", "0.61 - 0.8",
"0.81 - 1.0", "1.01 - 1.2", "1.21 - 1.4", "1.41 - 1.6",
"1.81 - 2.0", "2.0 o +"))
cortes <- c(.2, .4,.6, .8, 1, 1.2, 1.4, 1.6, 1.8, 2, 999)
cortes <- c(.2, .4,.6, .8, 1, 1.2, 1.4, 1.6, 1.8, 2)
cortes
binpal <- colorBin("PuOr", bins= cortes, pretty = T)
binpal
runApp()
seq(0,2,.2)
cortes <- c(seq(0,2,.2))
binpal <- colorBin("PuOr", bins= cortes, pretty = T)
runApp()
runApp()
binpal
cortes <- c(seq(0,2,.2))
binpal <- colorBin("PuOr", bins= cortes, pretty = T)
load(file = "Data/mzn_rbd.RDS")
load(file = "Data/mzns_procesadas.RDS")
load(file = "Data/rbd_procesadas.RDS")
load(file = "Data/mznsCentroide.RDS")
runApp()
runApp()
runApp()
cortes <- c(seq(0,2,.2))
colores <- colorBin("PuOr", bins= cortes, pretty = T)
colores
colores <- colorBin("PuOr", bins= cortes)
colores
runApp()
colores <- colorBin("PuOr", bins= cortes)
colores
runApp()
map <- leaflet(options = leafletOptions(doubleClickZoom= FALSE)) %>%
addTiles() %>%
addPolygons(data = polygonLayer,
popup = ~paste("N6a14:", n6a14, "<br/>", "Acceso:", Access),
stroke = T,
color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = .5,
fillColor = ~binpal(Access),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = escuelasSf,
popup = ~paste("Nombre:",nom_rbd,"<br/>", "Capacidad:", basica_cap)) %>%
addLegend("bottomright", pal = binpal, data = polygonLayer, values = ~Access,
title = "Matrículas por niñe", opacity = .5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
parameter_tabs <- tabsetPanel(
id = "params",
type = "hidden",
tabPanel(title = "Panel 1", value = "panel0"),
tabPanel(title = "Panel 2", value = "panel1",
textInput("newSchoolName", "Nombre de la Escuela", value = paste0("Nueva Escuela #", schoolN)),
numericInput("Capacidad", "Capacidad del Colegio", value = 450),
actionButton("applyChanges", "Calcular Cambios"))
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
h("hola")
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
cortes <- c(0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2)
binpal <- colorBin("PuOr",cortes, bins= 9, pretty = T)
load(file = "Data/mzn_rbd.RDS")
load(file = "Data/mzns_procesadas.RDS")
load(file = "Data/rbd_procesadas.RDS")
load(file = "Data/mznsCentroide.RDS")
runApp()
runApp()
runApp()
runApp()
load(file = "Data/mzn_rbd.RDS")
load(file = "Data/mzns_procesadas.RDS")
load(file = "Data/rbd_procesadas.RDS")
load(file = "Data/mznsCentroide.RDS")
runApp()
runApp()
runApp('C:/Users/CEDEUS 27/ownCloud/Indicadores_de_Sustentabilidad_Expansion/Umbrales/Umbrales_Comuna')
runApp('C:/Users/CEDEUS 27/ownCloud/Indicadores_de_Sustentabilidad_Expansion/Visualizadores/obesidadInfantil')
shiny::runApp()
load(file = "Data/mzn_rbd.RDS")
load(file = "Data/mzns_procesadas.RDS")
load(file = "Data/rbd_procesadas.RDS")
load(file = "Data/mznsCentroide.RDS")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
