# Define UI for application that draws a histogram
ui <- dashboardPage(     # Application title
dashboardHeader( title = "Modelador de Accesibilidad Comunal en Chillán", titleWidth  = 400
),
# Sidebar with a slider input for number of bins
dashboardSidebar(
verticalLayout(
selectInput("indicadorsh",
label = "Elija un indicador a modelar",
choices = c("Accesibilidad Escolar",
"Accesibilidad a Áreas Verdes",
"Cobertura de Bomberos",
"Cobertura de Carabineros",
"Cobertura de Emergencia"),
selected = "Accesibilidad Escolar"),
h3("Indicador de Accesibilidad Escolar"),
p("Esta herramienta permite evaluar la incidencia de la construcción de una nueva escuela municipal en un indicador de accesibilidad escolar municipal"),
p("El indicador de accesibilidad evalua la cantidad de matrículas disponibles por niño en función de la cercanía de las escuelas, cuantas matrículas tienen disponibles, y cuantos niños conviven cerca. De esta manera, el indicador de accesibilidada escolar integra oferta, demanda, y transporte"),
p("Para usarlo, se debe hacer click en 'Añadir Escuela', ingresar un nombre, una capacidad, y luego seleccionar un lugar del mapa para la escuela. Luego, se debe hacer click en 'Calcular Cambios'. El mapa se actualizará, presentando los efectos de la nueva escuela en el indicador."),
actionButton("actionSchool", "Añadir Escuela"),
parameter_tabs
)
# Show a plot of the generated distribution
),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/styles.css")
)
# Cajitas con indicadores generales
fluidRow(valueBoxOutput("total_kids"),
valueBoxOutput("total_slots"),
valueBoxOutput("mean_access")),
# Pestañas de información
tabsetPanel(
id = "tabs",
tabPanel(
title = "Accesibilidad",
value = "page1",
fluidRow( leafletOutput("map") )
),
tabPanel(
title = "Población",
value = "page2",
fluidRow( leafletOutput("mapPlotPop") )
),
tabPanel(
title = "Análisis",
value = "page3",
fluidRow( plotlyOutput("histPlot"),
plotlyOutput("corPlot"))
)
)
)
)
runApp()
library("shiny")
library("shinydashboard")
ui<- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/")
),
tags$style(".small-box.bg-yellow { background-color: #000000 !important; color: #000000 !important; }"),
fluidRow(
valueBoxOutput("name1"),
valueBoxOutput("name2")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
dashboardHeader(title = "Custom font"),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/")
),
tags$style(".small-box.bg-yellow { background-color: #000000 !important; color: #000000 !important; }"),
fluidRow(
valueBoxOutput("name1"),
valueBoxOutput("name2")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/")
),
tags$style(".small-box.bg-yellow { background-color: #000000 !important; color: #000000 !important; }"),
fluidRow(
valueBoxOutput("name1"),
valueBoxOutput("name2")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/")
),
tags$style(".small-box.bg-yellow { background-color: #000000 !important; color: #000000 !important; }"),
fluidRow(
valueBoxOutput("name1"),
valueBoxOutput("name2")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/styles.css")
),
tags$style(".small-box.bg-yellow { background-color: #000000 !important; color: #000000 !important; }"),
fluidRow(
valueBoxOutput("name1"),
valueBoxOutput("name2")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/styles.css")
),
tags$style(".small-box.bg-yellow { background-color: #000000 !important; color: #000000 !important; }"),
fluidRow(
valueBoxOutput("name1"),
valueBoxOutput("name2")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/styles.css")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "css/styles.css")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
# Custom CSS to hide the default logout panel
tags$head(tags$style(HTML('.shiny-server-account { display: none; }'))),
# The dynamically-generated user panel
uiOutput("userpanel")
),
dashboardBody()
)
server <- function(input, output, session) {
output$userpanel <- renderUI({
# session$user is non-NULL only in authenticated sessions
if (!is.null(session$user)) {
sidebarUserPanel(
span("Logged in as ", session$user),
subtitle = a(icon("sign-out"), "Logout", href="__logout__"))
}
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
# Custom CSS to hide the default logout panel
tags$head(tags$style(HTML('.shiny-server-account { display: none; }'))),
# The dynamically-generated user panel
uiOutput("userpanel")
),
dashboardBody()
)
server <- function(input, output, session) {
output$userpanel <- renderUI({
# session$user is non-NULL only in authenticated sessions
if (!is.null(session$user)) {
sidebarUserPanel(
span("Logged in as ", session$user),
subtitle = a(icon("sign-out"), "Logout", href="__logout__"))
}
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
)
)
)
)
server <- function(input, output, session) {
output$userpanel <- renderUI({
# session$user is non-NULL only in authenticated sessions
if (!is.null(session$user)) {
sidebarUserPanel(
span("Logged in as ", session$user),
subtitle = a(icon("sign-out"), "Logout", href="__logout__"))
}
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(tags$style(HTML('
.main-header .logo {
font-family: "Georgia", Times, "Times New Roman", serif;
font-weight: bold;
font-size: 24px;
}
')))
)
)
server <- function(input, output, session) {
output$userpanel <- renderUI({
# session$user is non-NULL only in authenticated sessions
if (!is.null(session$user)) {
sidebarUserPanel(
span("Logged in as ", session$user),
subtitle = a(icon("sign-out"), "Logout", href="__logout__"))
}
})
}
shinyApp(ui, server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "www/css/styles.css")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
getwd()
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "C:/Users/CEDEUS 27/ownCloud/R&D/Modelador Accesibilidad Escolar/www/css/styles.css")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "poto.csv")
)
)
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(includeCSS("www/css/styles.css"))
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(includeCSS("www/css/styles.css"))
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(includeCSS("www/css/styles.css")),
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(includeCSS("www/css/styles.css")),
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
library("shiny")
library("shinydashboard")
ui<- ## ui.R ##
dashboardPage(
dashboardHeader(title = "Custom font"),
dashboardSidebar(),
dashboardBody(
tags$head(includeCSS("www/css/styles.css"))
)
server<- function(input, output){
output$name1 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "yellow")
})
output$name2 <- renderValueBox({
valueBox("example", subtitle = "Subtitle text", color = "blue")
})
}
shinyApp(ui = ui, server = server)
